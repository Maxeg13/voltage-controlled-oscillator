
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800100  00800100  000001ba  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000079  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000018e  00000000  00000000  00000253  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d0  00000000  00000000  000003e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000153  00000000  00000000  000004b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a1  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000013  00000000  00000000  000006e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  88:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
byte sign1=0;

void adc_init()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24

    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);/*|(1<<ADPS0);*/
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADSC);
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24
}
  a4:	08 95       	ret

000000a6 <adc_read>:
{
    // select the corresponding channel 0~7
    // ANDing with ’7′ will always keep the value
    // of ‘ch’ between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
  a6:	90 91 7c 00 	lds	r25, 0x007C
  aa:	87 70       	andi	r24, 0x07	; 7
  ac:	98 7f       	andi	r25, 0xF8	; 248
  ae:	89 2b       	or	r24, r25
  b0:	80 93 7c 00 	sts	0x007C, r24


    // wait for conversion to complete
    // ADSC becomes ’0′ again
    // till then, run loop continuously
    ADCSRA |= (1<<ADSC);
  b4:	80 91 7a 00 	lds	r24, 0x007A
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 93 7a 00 	sts	0x007A, r24
    while(ADCSRA & (1<<ADSC));
  be:	80 91 7a 00 	lds	r24, 0x007A
  c2:	86 fd       	sbrc	r24, 6
  c4:	fc cf       	rjmp	.-8      	; 0xbe <adc_read+0x18>

    return (((ADCL|(ADCH<<8))>>2)-128);
  c6:	20 91 78 00 	lds	r18, 0x0078
  ca:	40 91 79 00 	lds	r20, 0x0079
  ce:	94 2f       	mov	r25, r20
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	82 2b       	or	r24, r18
  d6:	93 2b       	or	r25, r19
  d8:	95 95       	asr	r25
  da:	87 95       	ror	r24
  dc:	95 95       	asr	r25
  de:	87 95       	ror	r24
}
  e0:	80 58       	subi	r24, 0x80	; 128
  e2:	08 95       	ret

000000e4 <main>:
//PORTB|=1;
//_delay_us(1);
void main(void)
{
    sei();
  e4:	78 94       	sei
byte sign1=0;

void adc_init()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
  e6:	80 e4       	ldi	r24, 0x40	; 64
  e8:	80 93 7c 00 	sts	0x007C, r24

    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);/*|(1<<ADPS0);*/
  ec:	86 e8       	ldi	r24, 0x86	; 134
  ee:	80 93 7a 00 	sts	0x007A, r24
    ADCSRA |= (1<<ADSC);
  f2:	80 91 7a 00 	lds	r24, 0x007A
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 93 7a 00 	sts	0x007A, r24
void main(void)
{
    sei();
    adc_init();
    byte nb=1;
    DDRB=0xFF;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	84 b9       	out	0x04, r24	; 4

    for(;;)
    {
	//	loader

	inc=adc_read(0);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_read>
 106:	80 93 06 01 	sts	0x0106, r24
	xf+=inc;
 10a:	20 91 00 01 	lds	r18, 0x0100
 10e:	28 0f       	add	r18, r24
 110:	20 93 00 01 	sts	0x0100, r18
	x=(byte)(xf);
 114:	20 93 01 01 	sts	0x0101, r18
	sign1=(inc>0);
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	18 16       	cp	r1, r24
 11c:	0c f4       	brge	.+2      	; 0x120 <main+0x3c>
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	90 93 03 01 	sts	0x0103, r25
 124:	80 91 05 01 	lds	r24, 0x0105
	if(sign1)
 128:	99 23       	and	r25, r25
 12a:	19 f0       	breq	.+6      	; 0x132 <main+0x4e>
	{

	    if(xp>x)
 12c:	28 17       	cp	r18, r24
 12e:	30 f4       	brcc	.+12     	; 0x13c <main+0x58>
 130:	02 c0       	rjmp	.+4      	; 0x136 <main+0x52>
		PORTB=~PORTB;
	    }
	}
	else
	{
	    if(xp<x)
 132:	82 17       	cp	r24, r18
 134:	18 f4       	brcc	.+6      	; 0x13c <main+0x58>
	    {
		PORTB=~PORTB;
 136:	85 b1       	in	r24, 0x05	; 5
 138:	80 95       	com	r24
 13a:	85 b9       	out	0x05, r24	; 5
	    }
	}
	xp=x;
 13c:	20 93 05 01 	sts	0x0105, r18
 140:	df cf       	rjmp	.-66     	; 0x100 <main+0x1c>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
